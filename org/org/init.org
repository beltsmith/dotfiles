* TODO List
** TODO Package dependency management
How to load evil-mc after evil and still configure it.
** TODO Pull keybinding configurations out of source blocks and create tabular data
* agirdler literatemacs configuration
This is a literate programming style configuration file for emacs.
Configuration code is seperated into different heading and organized according to language.
Source blocks look like this
#+BEGIN_SRC emacs-lisp
(message "This is a source block")
#+END_SRC
Most of the source blocks you will see are "tangled" into files that are then loaded together as the configuration.

Tangling source blocks looks like as follows:
#+BEGIN_SRC org
,#+BEGIN_SRC emacs-lisp :tangle repl.el
(loop (print (eval (read))))
,#+END_SRC
#+END_SRC
** Example configuration
The structure I use for package configuration has a few steps.
*** Variable configuration
The first step is to setup the variables we will be modifying.
#+BEGIN_SRC emacs-lisp
(defun my/evil-init ()
  (setq evil-shift-width 2
        evil-escape-key-sequence "jk")))
#+END_SRC
*** Bindings
The next step is to define the keybindings we will be using.
Since we are using `use-package' we will be using conses to bind keys as opposed to `bind-key'
#+BEGIN_SRC emacs-lisp
(defvar my/evil-bind
  (:map evil-normal-state map
   (("J" . evil-join-one-space))
   :map evil-insert-state-map
   (([C-v] . yank)
   ([C-l] . hippie-expand)
   ([C-S-l] . sp-slurp-hybrid-sexp))))
#+END_SRC
*** Use package
The last step is to use `use-package' with the hooks and bindings we setup before
in order to ensure the packages are loaded and using the correct configuration.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :bind (my/evil-bind)
  :init
  (my/evil-init)
  (use-package evil-mc))
#+END_SRC
* Base configuration
:PROPERTIES:
:header-args: :tangle base-config.el
:END:
This section contains most of the base configuration code that is mode agnostic or globally affecting.
** Dependencies
*** smex
#+BEGIN_SRC emacs-lisp
(use-package smex
    :defer t
    :init
    (setq-default smex-history-length 32
                  smex-save-file (concat spacemacs-cache-directory ".smex-items")))
#+END_SRC
** Keyboard translates
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-i ?\H-i)
#+END_SRC
** Utility functions
:PROPERTIES:
:header-args: :tangle util.el
:END:

#+BEGIN_SRC emacs-lisp
(defun touch ()
  "updates mtime on the file for the current buffer"
  (interactive)
  (shell-command (concat "touch " (shell-quote-argument (buffer-file-name))))
  (clear-visited-file-modtime))

(defun my-save ()
  (interactive)
  (if (buffer-modified-p)
      (save-buffer)
    (touch)))

(defun insert-puts-debug ()
  "Insert puts debug string"
  (interactive)
  (end-of-line)
  (newline-and-indent)
  (insert "puts '#' * 90,")
  (end-of-line)
  (newline-and-indent)
  (insert "     caller,")
  (end-of-line)
  (newline-and-indent)
  (insert "     '#' * 90"))
#+END_SRC
** Keybindings
#+BEGIN_SRC
#+END_SRC
** Variables
*** URL Browser
This is a fix for opening URLs on OS X using `open' rather than creating a new browser instance
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "open")
#+END_SRC
* Ivy configuration
I use ivy as a replacement for helm as the fuzzy matching behaviour is closer to what I prefer.
** Use package
#+BEGIN_SRC emacs-lisp
(use-package ivy-mode
  :init (setq ivy-use-virtual-buffers t
              ivy-re-builders-alist '((t . ivy--regex-plus))
              ivy-count-format "(%d/%d) "
              ivy-initial-inputs-alist nil))
#+END_SRC
** Variables
Configures ivy to be nicer to use by giving it a count formatter,
having it use virtual buffers and default to not input.
#+BEGIN_SRC emacs-lisp
(setq ivy-use-virtual-buffers t
      ivy-re-builders-alist '((t . ivy--regex-plus))
      ivy-count-format "(%d/%d) "
      ivy-initial-inputs-alist nil)
#+END_SRC
* Evil configuration
"Emacs is a great environment lacking only a decent text editor"
Adding evil makes emacs usable.
** Functions
#+BEGIN_SRC emacs-lisp
(evil-define-operator evil-join-one-space (beg end)
  "Join the selected lines with one space between them."
  :motion evil-line
  (let ((count (count-lines beg end)))
    (when (> count 1)
      (setq count (1- count)))
    (dotimes (var count)
      (progn
        (end-of-line)
        (join-line 1)
        ;; (backward-char)
        (just-one-space)
        (backward-char)))))
#+END_SRC
** Bindings
:PROPERTIES:
:header-args: :tangle bindings.el
:END:
Give evil more bindings so it is closer to MY vim
#+BEGIN_SRC emacs-lisp
(defvar my/evil-bindings
  :map evil-normal-state-map
  ("J" . evil-join-one-space)
  ([C-w C-h] . evil-window-left)
  ([C-w C-l] . evil-window-right)
  ([C-w C-j] . evil-window-down)
  ([C-w C-k] . evil-window-up))
#+END_SRC
* Ruby
#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
:mode "\\.rb\\'"
:interpreter "ruby"
:bind
(

)
:config )
#+END_SRC
** Bindings
#+BEGIN_SRC emacs-lisp
(defun my/ruby-bindings ()
  "My ruby bindings"
  (evil-define-key 'normal ruby-mode-map
    "gf" 'projectile-rails-goto-file-at-point ;; Goto file
    "gt" 'robe-jump                           ;; Goto tag

    "\\m" 'projectile-rails-find-model
    "\\c" 'projectile-rails-find-controller
    "\\s" 'projectile-rails-find-spec
    "\\v" 'projectile-rails-find-view
    "\\h" 'projectile-rails-find-helper
    "\\w" 'projectile-rails-find-worker
    "\\f" 'projectile-rails-find-factory

    "\\a" 'rails-alternate-files/body

    "\\t" 'projectile-toggle-between-implementation-and-test))
#+END_SRC
** Hook binding
#+BEGIN_SRC emacs-lisp
(defun my-ruby-mode-hook ()
  (rbenv-use-corresponding)
  (rufo-minor-mode)

  (spacemacs/declare-prefix-for-mode 'ruby-mode "pg" "Projectile GOTO")

  (spacemacs/set-leader-keys-for-major-mode 'ruby-mode
    "pgg" 'projectile-rails-goto-gemfile
    "pgr" 'projectile-rails-goto-routes
    "pgs" 'projectile-rails-goto-schema
    "pgh" 'projectile-rails-goto-spec-helper
    "ipd" 'insert-puts-debug)


  (setq enh-ruby-deep-indent-paren t
        enh-ruby-hanging-paren-deep-indent-level 0
        evil-shift-width 2
        rbenv-installation-dir "/usr/local/Cellar/rbenv/1.1.1"
        rspec-use-spring-when-possible t)
  (robe-mode 1)
  (ruby-refactor-mode-launch)
  (eldoc-mode 1)
  (yard-mode 1)

  (add-to-list 'write-contents-functions (lambda () (and (rbenv-use-corresponding) nil))))
#+END_SRC
** Additional packages
#+BEGIN_SRC emacs-lisp
(setq my/ruby-packages
      '(
        rufo
        yard-mode
        ruby-refactor
        rspec-mode
       ))

#+END_SRC
